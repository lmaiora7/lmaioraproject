#BlueJ class context
comment0.params=xint\ yint\ o
comment0.target=Follower(int,\ int,\ ObjectMap)
comment1.params=xx\ yy
comment1.target=void\ setTarget(int,\ int)
comment1.text=\n\ This\ method\ changes\ the\ main\ target\ manually\n
comment2.params=tt
comment2.target=void\ setTarget(Target)
comment3.params=
comment3.target=void\ findNextTarget()
comment3.text=\n\ This\ method\ scans\ whats\ the\ next\ step\ to\ getting\ to\ the\ finalTarget\ by\ making\ a\ new\ currentTarget.\n\ The\ method\ begins\ by\ making\ a\ rough\ step\ by\ step\ process\ of\ getting\ to\ final\ target,\ from\ there\ it\ looks\ for\n\ any\ of\ the\ points\ its\ marked\ that\ it\ can\ use\ to\ cut\ corners\ and\ arrive\ more\ efficiently.\ If\ no\ efficient\ \n\ travel\ method\ is\ found\ it\ will\ just\ use\ the\ original\ solution\ it\ created.\ If\ no\ possible\ way\ of\ arriving\n\ at\ the\ final\ target\ is\ possible\ then\ it\ will\ set\ finalTarget\ to\ null\ and\ currentTarget\ to\ null\ as\ well.\n
comment4.params=
comment4.target=void\ findNextDirection()
comment4.text=\n\ This\ method\ takes\ the\ currentTarget\ and\ loc\ to\ create\ a\ equation\ for\ getting\ to\ the\ currentTarget\n
comment5.params=xx\ yy
comment5.target=boolean\ checkCollision(int,\ int)
comment5.text=\n\ This\ method\ uses\ the\ followers\ current\ location\ and\ the\ given\ parameters\ to\ figure\ out\ if\ there\ is\ a\ direct\n\ path\ between\ the\ two.\ The\ collision\ it\ checks\ is\ the\ ObjectMap\ initialized\ under\ currentMap.\n
comment6.params=
comment6.target=void\ update()
comment6.text=\n\ This\ method\ updates\ the\ follower,\ by\ consectutively\ calling\ this\ it\ will\ move\ to\ its\ objective\n
comment7.params=
comment7.target=void\ draw()
comment7.text=\n\ This\ method\ draws\ the\ follower\ to\ the\ screen\n
numComments=8
