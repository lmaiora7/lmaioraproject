#BlueJ class context
comment0.params=xint\ yint\ o
comment0.target=Follower(int,\ int,\ ObjectMap)
comment1.params=xint\ yint\ tt\ o
comment1.target=Follower(int,\ int,\ Target,\ ObjectMap)
comment10.params=xx\ yy
comment10.target=boolean\ checkCollisionTarget(int,\ int)
comment10.text=\n\ This\ method\ uses\ the\ finalTarget's\ current\ location\ and\ the\ given\ parameters\ to\ figure\ out\ if\ there\ is\ a\ direct\n\ path\ between\ the\ two.\ The\ collision\ it\ checks\ is\ the\ ObjectMap\ initialized\ under\ currentMap.\n
comment11.params=
comment11.target=void\ update()
comment11.text=\n\ This\ method\ updates\ the\ follower,\ by\ consectutively\ calling\ this\ it\ will\ move\ to\ its\ objective\ by\ itself\n
comment12.params=
comment12.target=java.lang.String\ toString()
comment13.params=
comment13.target=void\ draw()
comment13.text=\n\ This\ method\ draws\ the\ follower\ to\ the\ screen\n
comment2.params=
comment2.target=Point\ getLocation()
comment3.params=p
comment3.target=void\ setTracerTemporary(java.util.ArrayList)
comment4.params=xx\ yy
comment4.target=void\ setTarget(int,\ int)
comment4.text=\n\ This\ method\ changes\ the\ main\ target\ manually\n
comment5.params=tt
comment5.target=void\ setTarget(Target)
comment6.params=
comment6.target=void\ findNextTarget()
comment6.text=\n\ This\ method\ scans\ whats\ the\ next\ step\ to\ getting\ to\ the\ finalTarget\ by\ making\ a\ new\ currentTarget.\n\ The\ method\ begins\ by\ making\ a\ rough\ step\ by\ step\ process\ of\ getting\ to\ final\ target,\ from\ there\ it\ looks\ for\n\ any\ of\ the\ points\ its\ marked\ that\ it\ can\ use\ to\ cut\ corners\ and\ arrive\ more\ efficiently.\ If\ no\ efficient\ \n\ travel\ method\ is\ found\ it\ will\ just\ use\ the\ original\ solution\ it\ created.\ If\ no\ possible\ way\ of\ arriving\n\ at\ the\ final\ target\ is\ possible\ then\ it\ will\ set\ finalTarget\ to\ null\ and\ currentTarget\ to\ null\ as\ well.\n\ \n\ UPDATE\ this\ now\ creates\ a\ arrayList\ that\ stores\ the\ set\ of\ point\ for\ it\ to\ follow\n
comment7.params=
comment7.target=Point\ nextTarget()
comment7.text=\n\ This\ method\ will\ use\ the\ list\ of\ target\ to\ follow\ and\ find\ the\ next\ one\ on\ the\ list\ and\ return\ the\ next\ target\ in\ order\ to\ get\n\ to\ the\ final\ target,\ findNextTarget()\ must\ run\ before\ this\ one.\n
comment8.params=
comment8.target=void\ findNextDirection()
comment8.text=\n\ This\ method\ takes\ the\ currentTarget\ and\ loc\ to\ create\ a\ equation\ for\ getting\ to\ the\ currentTarget\n
comment9.params=xx\ yy
comment9.target=boolean\ checkCollisionFollower(int,\ int)
comment9.text=\n\ This\ method\ uses\ the\ followers\ current\ location\ and\ the\ given\ parameters\ to\ figure\ out\ if\ there\ is\ a\ direct\n\ path\ between\ the\ two.\ The\ collision\ it\ checks\ is\ the\ ObjectMap\ initialized\ under\ currentMap.\n
numComments=14
